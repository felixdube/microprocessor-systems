


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             kalmanfilter_asm, CODE, READONL
Y
    2 00000000                 EXPORT           kalmanfilter
    3 00000000         kalmanfilter
    4 00000000         ;R0 pointer to input array
    5 00000000         ;R1 pointer to filtered data
    6 00000000         ;R2 array's length
    7 00000000         ;R3 pointer to kalmen filter state
    8 00000000         ;POP {R3}
    9 00000000         ;LDR R7, =instance1
   10 00000000         
   11 00000000         ;find a way to do these 2 lines only once
   12 00000000 4604            MOV              R4, R0      ;input data addr wi
                                                            th offset
   13 00000002 460D            MOV              R5, R1      ;filtered data addr
                                                             with offset
   14 00000004 F04F 0600       MOV              R6, #0      ;counter of input a
                                                            rray element's filt
                                                            ered
   15 00000008 B085            SUB              SP, SP, #20
   16 0000000A         loop
   17 0000000A         ;load filter state data
   18 0000000A ED94 0A00       VLDR.f32         S0, [R4]    ;measurement/ initi
                                                            al value
   19 0000000E EDDD 0A00       VLDR.f32         S1, [sp]    ;noise covariance q
                                                            
   20 00000012 ED9D 1A01       VLDR.f32         S2, [sp, #4] 
                                                            ;noise covariance r
                                                            
   21 00000016 EDDD 1A02       VLDR.f32         S3, [sp, #8] ;estimated value x
                                                            
   22 0000001A ED9D 2A03       VLDR.f32         S4, [sp, #12] ;estimation error
                                                             covariance p
   23 0000001E EDDD 2A04       VLDR.f32         S5, [sp, #16] ;adaptive kalman 
                                                            filter k
   24 00000022         ; S6 scratch register
   25 00000022         
   26 00000022         
   27 00000022         ;P = P + Q
   28 00000022 EE32 2A20       VADD.f32         S4, S4, S1
   29 00000026         
   30 00000026         ; maybe can optimise
   31 00000026         ;also check if we have to use updated p or initial p
   32 00000026         ;k = p/ (p + r)
   33 00000026 EE32 3A01       VADD.f32         S6, S4, S2
   34 0000002A EEC2 2A03       VDIV.f32         S5, S4, S6
   35 0000002E         
   36 0000002E         ;x = x + k * (measurement - x)
   37 0000002E EE30 3A61       VSUB.f32         S6, S0, S3
   38 00000032 EE23 3A22       VMUL.f32         S6, S6, S5
   39 00000036 EE71 1A83       VADD.f32         S3, S3, S6  ;simplyfied these t
                                                            wo with one command
                                                            
   40 0000003A         ;VLMA.f32 S3, S5, S6 ; multiply and accumulate into x
   41 0000003A         
   42 0000003A         ;p = (1 - k) * p = p-pk
   43 0000003A EEF7 3A00       VLDR.f32         S7, =1.0    ; don't know if you
                                                             can declare a floa
                                                            ting point this way



ARM Macro Assembler    Page 2 


                                                            
   44 0000003E EE33 3AE2       VSUB.f32         S6, S7, S5
   45 00000042 EE22 2A03       VMUL.f32         S4, S4, S6
   46 00000046         ;VLMS.f32 S4, S4, S5
   47 00000046         
   48 00000046         
   49 00000046         
   50 00000046         
   51 00000046         ;store the output
   52 00000046 EDC5 1A00       VSTR.f32         S3, [R5]
   53 0000004A F105 0504       ADD              R5, R5, #4
   54 0000004E F104 0404       ADD              R4, R4, #4
   55 00000052         
   56 00000052         ;update counter
   57 00000052 F106 0601       ADD              R6, R6, #1
   58 00000056         
   59 00000056         ;Output on S0, maybe not necessary
   60 00000056         ;VMOV.f32 S0, S3
   61 00000056         
   62 00000056         ;check if all the data has been filtered
   63 00000056 42B2            CMP              R2, R6
   64 00000058 D1D7            BNE              loop
   65 0000005A         
   66 0000005A         ;Store the new state variables
   67 0000005A         ;TODO
   68 0000005A         
   69 0000005A 4770            BX               LR
   70 0000005C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\kalmanfilter_asm.d -o.\objects\kalmanfilter_asm.o -IC
:\Users\juan-\Documents\University\University6\MicroP\Lab_1_team\microprocessor
-systems\Lab1_STM32F4Cube_Base_project\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.
0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\De
vice\ST\STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VE
RSION SETA 517" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --l
ist=.\listings\kalmanfilter_asm.lst kalmanfilter_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

kalmanfilter 00000000

Symbol: kalmanfilter
   Definitions
      At line 3 in file kalmanfilter_asm.s
   Uses
      At line 2 in file kalmanfilter_asm.s
Comment: kalmanfilter used once
kalmanfilter_asm 00000000

Symbol: kalmanfilter_asm
   Definitions
      At line 1 in file kalmanfilter_asm.s
   Uses
      None
Comment: kalmanfilter_asm unused
loop 0000000A

Symbol: loop
   Definitions
      At line 16 in file kalmanfilter_asm.s
   Uses
      At line 64 in file kalmanfilter_asm.s
Comment: loop used once
3 symbols
338 symbols in table
